<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation=
       "http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee.xsd">

  <!-- 컴포넌트 자동 스캔 => 자동 생성 => 의존 객체 자동 주입
      - @Component가 붙은 클래스를 찾아 객체를 자동 생성하게 만든다.
      context:component-scan 태그 추가
       => (클래스를 찾아) 이 작업을 처리하는 객체가 등록된다.
       => context:annotation-config는 자동으로 활성화된다.
  -->
  <!-- sems 패키지 안에서 sems.serlvet.* 패키지들은 검색하지 않음. -->
  <context:component-scan base-package="sems" >
    <context:exclude-filter type="regex"
                            expression="sems.controls.*"/>
  </context:component-scan>

	<jee:jndi-lookup id="dataSource" 
	                 jndi-name="java:comp/env/jdbc/studydb" />

	<!-- mybatis의 SqlSessionFactory 객체를 생성
	      - DB가 필요하니까 DB 이름도 정해줌.
	      
	      - typeAliasesPackage
	       value 객체가 들어 있는 패키지만 설정하면 됨.(SubjectVo, UserVo)
	       sems.vo 패키지에 있는 모든 클래스를 별명으로 사용
	       클래스이름에 첫 알파벳을 소문자로 하는 것을 별명으로 사용 가능
	       
	      - mapperLocations
	       매퍼 파일만 지정
	       sems.dao/xxxMapper.xml
	 -->
	<bean id="sqlSessionFactory" 
	      class="org.mybatis.spring.SqlSessionFactoryBean">
	   <property name="dataSource" ref="dataSource" />
	   <property name="typeAliasesPackage" value="sems.vo" />
	   <property name="mapperLocations" 
	             value="classpath*:sems/dao/*Mapper.xml" />
  </bean>
  
  <!-- 스프링 트랜잭션 설정
      - 보통 dataSource 설정하면, 트랜잭션도 설정함.
      - 트랜잭션 매니저 설정하는 코드 추가해 줌.
      - 나중에 서비스할 때 다룰 예정
     1) 개발자가 관리하는 과정 (도 있다고 함)
     2) 스프링이 관리하는 과정 (아래코드)
      - 보통 트랜잭션은 tx 이름을 사용함.
   -->
  <bean id="txManager" 
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>
    
</beans>